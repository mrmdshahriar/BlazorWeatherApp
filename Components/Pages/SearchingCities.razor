@page "/SearchingCities"
@using BlazorWeatherApp.Models
@inject HttpClient httpClient
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Searching Cities</PageTitle>

<h1>Searching Cities!</h1>

<div class="row" style="padding:30px;display:flex;align-items:center;justify-content:left;">
    <div class="col-md-6">

        <input @oninput ="((args) => EnableButton(args))" class="form-control" type="text" style="width:200px;display:inline-block;" />

        <input type="button" disabled="@disabled" class="btn btn-primary" @onclick="SearchingCitiesReport" value="Searching Cities" />
    </div>
</div>
<table class="table table-bordered table-striped" id="myTable">
    <thead style="background-color:#3939b7;color:white;">
        <tr>
            <th>City</th>
            <th>Temperature</th>
            <th>Humidity</th>
            <th>Pressure</th>
            <th>Weather</th>
            <th>WindSpeed</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var x in weatherList)
        {
            <tr>
                <td>@x.city</td>
                <td>@x.temperature</td>
                <td>@x.humidity</td>
                <td>@x.pressure</td>
                <td>@x.weather</td>
                <td>@x.windSpeed</td>
            </tr>
        }
    </tbody>
</table>

@* <script>
    function DataTable() {
     $(document).ready(function () {
      $('#myTable').DataTable();
     });
    }
</script> *@

@code {
    public string cityName = "";
    public bool disabled = true;

    IEnumerable<WeatherData> weatherList = null;

    protected override async Task OnInitializedAsync()
    {
        weatherList = new List<WeatherData>();
    }

    public void EnableButton(ChangeEventArgs args)
    {
        if(args.Value != null)
        {
            var str = args.Value.ToString();

            if (str.Length > 2)
            {
                cityName = str;
                disabled = false;
            }
            else
            {
                cityName = str;
                disabled = true;
            }
        }
    }

    public async Task SearchingCitiesReport()
    {
        try
        {
            var response = await httpClient.GetAsync("https://localhost:44367/api/weather/search?query=" + cityName);

            weatherList = Helper.ReadResponseMessage<List<WeatherData>>(response);
        }
        catch(Exception ex)
        {
            Console.WriteLine("Error : " + ex.Message);
        }

    }
}